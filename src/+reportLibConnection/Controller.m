classdef (Abstract) Controller

    properties (Constant)
        %-----------------------------------------------------------------%
        docVersion = dictionary(["Preliminar", "Definitiva"], ...
            [struct('version', 'preview', 'encoding', 'UTF-8'), struct('version', 'final', 'encoding', 'ISO-8859-1')])
    end

    methods (Static)
        %-----------------------------------------------------------------%
        function Run(app, projectData, measData, stationTable, pointsTable, generalSettings)
            arguments
                app
                projectData
                measData
                stationTable
                pointsTable
                generalSettings
            end

            [projectFolder, ...
             programDataFolder] = appUtil.Path(class.Constants.appName, app.mainApp.rootFolder);

            issueId    = num2str(generalSettings.Report.issue);
            docName    = generalSettings.Report.model;
            docIndex   = find(strcmp({projectData.documentModel.Name}, docName), 1);
            if isempty(docIndex)
                error('Pendente escolha do modelo de relatório')
            end

            docType    = projectData.documentModel(docIndex).DocumentType;
            docVersion = reportLibConnection.Controller.docVersion(generalSettings.Report.reportVersion);

            try
                if ~isdeployed()
                    error('ForceDebugMode')
                end
                docScript = jsondecode(fileread(fullfile(programDataFolder, 'ReportTemplates', projectData.documentModel(docIndex).File)));
            catch
                docScript = jsondecode(fileread(fullfile(projectFolder,     'ReportTemplates', projectData.documentModel(docIndex).File)));
            end
        
            % reportInfo
            % Importante observar que o campo "Function" armazena informações
            % gerais, a compor itens "Introdução", "Metodologia" e "Conclusão",
            % e informações específicas, a compor itens com recorrências, como 
            % "Resultados".
            reportInfo = struct('App',      app, ...
                                'Version',  generalSettings.AppVersion,  ...
                                'Path',     struct('rootFolder',     app.mainApp.rootFolder, ...
                                                   'userFolder',     generalSettings.fileFolder.userPath, ...
                                                   'tempFolder',     generalSettings.fileFolder.tempPath, ...
                                                   'appConnection',  projectFolder, ...
                                                   'appDataFolder',  programDataFolder), ...
                                'Model',    struct('Name',           docName, ...
                                                   'DocumentType',   docType, ...
                                                   'Script',         docScript, ...
                                                   'Version',        docVersion.version), ...
                                'Function', struct('table_Stations',        stationTable, ...
                                                   'table_Points',          pointsTable,  ...
                                                   'table_FileSummary',    'reportLibConnection.Table.FileSummary(reportInfo)', ...
                                                   'table_FileByLocation', 'reportLibConnection.Table.FileByLocation(reportInfo)', ...
                                                   ...
                                                   'table_PointsByLocation',    'reportLibConnection.Table.PointsByLocation(reportInfo,   analyzedData, tableOptArgs{:})',       ...
                                                   'var_NumPointsByLocation',   'reportLibConnection.Variable.TableProperty(reportInfo,   analyzedData, "PointsTableHeight")',   ...
                                                   'table_StationsByLocation',  'reportLibConnection.Table.StationsByLocation(reportInfo, analyzedData, tableOptArgs{:})',       ...
                                                   'var_NumStationsByLocation', 'reportLibConnection.Variable.TableProperty(reportInfo,   analyzedData, "StationsTableHeight")', ...
                                                   ...
                                                   'image_Plot',           'reportLibConnection.Plot.Controller(reportInfo, analyzedData, imgSettings)', ...
                                                   ... 
                                                   'var_Issue',            issueId, ...
                                                   'var_Unit',             generalSettings.Report.unit, ...
                                                   ...
                                                   'var_RelatedLocations', strjoin(unique({measData.Location}), ', '), ...
                                                   'var_Id',               'analyzedData.ID', ...
                                                   'var_NumFiles',         'numel(analyzedData.InfoSet.measData)', ...
                                                   'var_FileName',         'reportLibConnection.Variable.ClassProperty(analyzedData, "Filename")', ...
                                                   'var_Sensor',           'reportLibConnection.Variable.ClassProperty(analyzedData, "Sensor")', ...
                                                   'var_Location',         'reportLibConnection.Variable.ClassProperty(analyzedData, "Location")', ...
                                                   'var_Location_I',       'reportLibConnection.Variable.ClassProperty(analyzedData, "Location_I")', ...
                                                   'var_LocationSummary',  'reportLibConnection.Variable.ProjectProperty(reportInfo, analyzedData, "LocationSummary")', ...
                                                   'var_Content',          'reportLibConnection.Variable.ClassProperty(analyzedData, "Content")', ...
                                                   'var_MetaData',         'reportLibConnection.Variable.ClassProperty(analyzedData, "MetaData")', ...
                                                   'var_Measures',         'reportLibConnection.Variable.ClassProperty(analyzedData, "Measures")', ...
                                                   'var_CoveredDistance',  'reportLibConnection.Variable.ClassProperty(analyzedData, "CoveredDistance")', ...
                                                   'var_FieldValueLimits', 'reportLibConnection.Variable.ClassProperty(analyzedData, "FieldValueLimits")', ...
                                                   'var_ObservationTime',  'reportLibConnection.Variable.ClassProperty(analyzedData, "ObservationTime")', ...
                                                   'var_LatitudeLimits',   'reportLibConnection.Variable.ClassProperty(analyzedData, "LatitudeLimits")', ...
                                                   'var_LongitudeLimits',  'reportLibConnection.Variable.ClassProperty(analyzedData, "LongitudeLimits")', ...
                                                   'var_Latitude',         'reportLibConnection.Variable.ClassProperty(analyzedData, "Latitude")', ...
                                                   'var_Longitude',        'reportLibConnection.Variable.ClassProperty(analyzedData, "Longitude")', ...
                                                   'var_PointsTable',      'analyzedData.InfoSet.pointsTable', ...
                                                   'var_StationTable',     'analyzedData.InfoSet.stationTable', ...
                                                   ...
                                                   'settings_ExternalRequest', 'reportLibConnection.Variable.GeneralSettings(reportInfo, "ExternalRequest")', ...
                                                   'settings_MonitoringPlan', 'reportLibConnection.Variable.GeneralSettings(reportInfo, "MonitoringPlan")'), ...
                                'Project',  projectData, ...
                                'Object',   measData, ...
                                'Settings', generalSettings);
            
            fieldsUnnecessary = {'rootFolder', 'entryPointFolder', 'tempSessionFolder', 'ctfRoot'};
            fieldsUnnecessary(cellfun(@(x) ~isfield(reportInfo.Version.application, x), fieldsUnnecessary)) = [];
            if ~isempty(fieldsUnnecessary)
                reportInfo.Version.application = rmfield(reportInfo.Version.application, fieldsUnnecessary);
            end

            % dataOverview
            % Caso dataOverview não seja escalar e exista um item no relatório
            % com recorrência, a própria lib cria a variável "var_Index", acessível 
            % em "reportInfo.Function.var_Index".
            dataOverview = struct('ID', {}, 'InfoSet', {}, 'HTML', {});

            locationList = {measData.Location};
            locations    = unique(locationList);

            for ii = 1:numel(locations)
                idIndexes   = find(strcmp(locationList, locations{ii}));
                [~, idSort] = sort(arrayfun(@(x) x.Data.Timestamp(1), measData(idIndexes)));
                idIndexes   = idIndexes(idSort);
                
                fileList    = unique({measData(idIndexes).Filename});
                pointsTableIndexes = [];
                for jj = 1:height(pointsTable)
                    sourceFiles = jsondecode(pointsTable.("Fonte de dados"){jj});
                    if ~iscellstr(sourceFiles)
                        sourceFiles = cellstr(sourceFiles);
                    end

                    if any(ismember(sourceFiles, fileList))
                        pointsTableIndexes = [pointsTableIndexes, jj];
                    end
                end                   
                
                locationSubList = getFullListOfLocation(projectData, measData(idIndexes), stationTable, max(generalSettings.MonitoringPlan.Distance_km, generalSettings.ExternalRequest.Distance_km));
                stationTableIndexes = ismember(stationTable.Location, locationSubList);

                dataOverview(end+1) = struct('ID',      measData(idIndexes(1)).Location,                              ...
                                             'InfoSet', struct('indexes',      idIndexes,                             ...
                                                               'measData',     measData(idIndexes),                   ...
                                                               'measTable',    createMeasTable(measData(idIndexes)),  ...
                                                               'pointsTable',  pointsTable(pointsTableIndexes, :),    ...
                                                               'stationTable', stationTable(stationTableIndexes, :)), ...
                                             'HTML',    struct('Component', {}, 'Source', {}, 'Value', {}));
                    
                % if ~isempty(measData(idIndexes(1)).UserData) && isfield(measData(idIndexes(1)).UserData, 'externalFiles')
                %     dataOverview(end).HTML = vertcat([measData(idIndexes).UserData].externalFiles);
                % end
            end
            
            % Cria relatório:
            HTMLDocContent = reportLib.Controller(reportInfo, dataOverview);
            
            % Em sendo a versão "Preliminar", apenas apresenta o html no
            % navegador. Por outro lado, em sendo a versão "Definitiva",
            % salva-se o arquivo ZIP em pasta local.
            [baseFullFileName, baseFileName] = appUtil.DefaultFileName(generalSettings.fileFolder.tempPath, 'Report', issueId);
            HTMLFile = [baseFullFileName '.html'];
            
            writematrix(HTMLDocContent, HTMLFile, 'QuoteStrings', 'none', 'FileType', 'text', 'Encoding', docVersion.encoding)

            switch docVersion.version
                case 'preview'
                    web(HTMLFile, '-new')

                case 'final'
                    % !! PENDENTE !!

                    % JSONFile = [baseFullFileName '.json'];
                    % XLSXFile = [baseFullFileName '.xlsx'];
                    % ZIPFile  = appUtil.modalWindow(app.UIFigure, 'uiputfile', '', {'*.zip', 'SCH (*.zip)'}, fullfile(generalSettings.fileFolder.userPath, [baseFileName '.zip']));
                    % if isempty(ZIPFile)
                    %     return
                    % end
                    % 
                    % % Salva em pasta temporária os arquivos JSON e XLSX. E salva
                    % % em pasta escolhida pelo usuário o arquivo ZIP.
                    % jsonFileConfig  = {generalSettings.ui.reportTable.exportedFiles.sharepoint.name, ...
                    %                    generalSettings.ui.reportTable.exportedFiles.sharepoint.label};
                    % jsonFileTable   = renamevars(app.projectData.listOfProducts, jsonFileConfig{:});
                    % 
                    % jsonFileContent = struct('issueId', issueId,                    ...
                    %                          'entity',  struct('type', entityType,  ...
                    %                                            'id',   entityId,    ...
                    %                                            'name', entityName), ...
                    %                          'items',   jsonFileTable);
                    % 
                    % xlsxFileConfig  = generalSettings.ui.reportTable.exportedFiles.eFiscaliza;
                    % xlsxFileContent = reportLibConnection.tableProducts(app.projectData.listOfProducts, xlsxFileConfig);
                    % 
                    % writematrix(jsonencode(jsonFileContent, 'PrettyPrint', true), JSONFile, "FileType", "text", "QuoteStrings", "none", "WriteMode", "overwrite")
                    % writetable(xlsxFileContent, XLSXFile, "UseExcel", false, "Sheet", "Upload", "FileType", "spreadsheet", "WriteMode", "replacefile")
                    % 
                    % zip(ZIPFile, {HTMLFile, JSONFile, XLSXFile})
                    % 
                    % app.projectData.generatedFiles.lastHTMLDocFullPath = HTMLFile;
                    % app.projectData.generatedFiles.lastTableFullPath   = JSONFile;
                    % app.projectData.generatedFiles.lastZIPFullPath     = ZIPFile;
            end
        end
    end
end